{"version":3,"sources":["webpack://CyanoMobile/webpack/bootstrap","webpack://CyanoMobile/./src/utils.ts","webpack://CyanoMobile/./src/CyanoBridge.ts","webpack://CyanoMobile/./src/client/proxy.ts","webpack://CyanoMobile/./src/client/smartcontract.ts","webpack://CyanoMobile/./src/client/index.ts","webpack://CyanoMobile/./src/client/asset.ts","webpack://CyanoMobile/./src/client/identity.ts","webpack://CyanoMobile/./src/client/message.ts","webpack://CyanoMobile/./src/client/mobile.ts","webpack://CyanoMobile/./src/client/qrcode.ts","webpack://CyanoMobile/./src/client/provider.ts","webpack://CyanoMobile/./src/client/stateChannel.ts"],"names":["enumerable","get","getter","value","key","bind","module","Object","prototype","hasOwnProperty","call","object","property","p","type","name","map","v","formatArgItem","val","k","keys","Error","JSON","stringify","operation","args","params","push","Math","random","toString","substring","timeout","this","version","handlers","injected","pendingMsgs","req","id","randomId","Promise","resolve","reject","uri","btoa","encodeURIComponent","sendMessage","handleMessageEvent","action","needTimeout","msg","parse","decodeURIComponent","atob","handler","listener","offMessage","e","res","parseMessage","data","window","document","addEventListener","removeEventListener","postMessage","checkInterval","setInterval","originalPostMessage","forEach","m","clearInterval","that","event","message","setTimeout","cb","async","request","scApi","scriptHash","payer","config","login","url","functionParams","makeInvokeFunction","invokeConfig","contractHash","functions","gasPrice","gasLimit","length","api","asset","getAccount","from","to","amount","invoke","identity","getIdentity","authentication","authorization","ontid","publicKey","invokeRead","signMessage","mobile","getData","doAction","gotoWebview","gotoNative","switchIdentity","switchDeviceCode","smartContract","qrcode","provider","getProvider","stateChannel"],"mappings":"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","file":"browser.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export function formatArgItem(p: any) {\n    if (p.type === 'Boolean' || p.type === 'Integer') {\n        return {\n            name: p.name,\n            value: p.value\n        };\n    } else if (p.type === 'String' || p.type === 'ByteArray' || p.type === 'Long' || p.type === 'Address') {\n        return {\n            name: p.name,\n            value: p.type + ':' + p.value\n        };\n    } else if (p.type === 'Array') {\n        return {\n            name: p.name,\n            value: p.value.map((v: any) => formatArgItem(v))\n        };\n    } else if (p.type === 'Map') {\n        const val: any = {};\n        for (const k of Object.keys(p.value)) {\n            val[k] = formatArgItem(p.value[k]);\n        }\n        return {\n            name: p.name,\n            value: val\n        };\n    } else {\n        throw new Error('Invalid parmeter type: ' + JSON.stringify(p));\n    }\n}\n\nexport function makeInvokeFunction(operation: string, args: any[]) {\n    const params = [];\n    for (const p of args) {\n        params.push(formatArgItem(p));\n    }\n    const obj = {\n        operation,\n        args: params\n    };\n    return obj;\n}\n\nexport function randomId() {\n    return Math.random().toString(36).substring(2, 10);\n}\n\nexport function ready(callback: () => void) {\n    if (typeof document === 'undefined') {\n        throw new Error('document-ready only runs in the browser');\n    }\n    const state = document.readyState;\n    if (state === 'complete' || state === 'interactive') {\n        return setTimeout(callback, 0);\n    }\n\n    document.addEventListener('DOMContentLoaded', function onLoad() {\n        callback();\n    });\n}","import { randomId } from './utils';\n\nclass CyanoBridge {\n\n    version: string;\n    listener: (e: any) => any;\n    timeout: number = 3000;\n    handlers: any;\n    checkInterval: number;\n    injected: boolean;\n    pendingMsgs: any [];\n\n    constructor(timeout?: number) {\n        this.version = 'v1.0.0';\n        this.handlers = {};\n        if (timeout) {\n            this.timeout = timeout;\n        }\n        this.injected = false;\n        this.pendingMsgs = [];\n    }\n\n    call(req: any) {\n        const id = randomId();\n        req.id = id;\n        return new Promise((resolve, reject) => {\n            const msg = btoa(encodeURIComponent(JSON.stringify(req)));\n            const uri = 'ontprovider://ont.io?params=' + msg;\n            this.sendMessage(uri);\n            this.handleMessageEvent(id, resolve, reject, req.action, req.needTimeout);\n        });\n    }\n\n    invokeRead() {\n        throw new Error('invokeRead not supported yet.');\n    }\n\n    parseMessage(msg: string): any {\n        return JSON.parse(decodeURIComponent(atob(msg)));\n    }\n\n    onMessage(handler: (res: any) => {}) {\n        if (this.listener) {\n            this.offMessage();\n        }\n        const listener = (e: any) => {\n            const res = this.parseMessage(e.data);\n            handler(res);\n        };\n        window.document.addEventListener('message', listener);\n        this.listener = listener;\n    }\n\n    offMessage() {\n        window.document.removeEventListener('message', this.listener);\n    }\n\n    private sendMessage(msg: string) {\n        // provider will inject originalPostMessage method in js\n        // detect this method to decide when to send msssage\n        if (this.injected) {\n            window.postMessage(msg, '*');\n            return;\n        }\n        if (this.checkInterval) {\n            this.pendingMsgs.push(msg);\n            return;\n        }\n        this.checkInterval = window.setInterval(() => {\n            if ((window as any).originalPostMessage) {\n                window.postMessage(msg, '*');\n                this.injected = true;\n                this.pendingMsgs.forEach((m: string) => {\n                    window.postMessage(m, '*');\n                });\n                window.clearInterval(this.checkInterval);\n            }\n        }, 100);\n    }\n\n    private handleMessageEvent(\n        id: string,\n        resolve: any,\n        reject: any,\n        action: string,\n        needTimeout:\n        boolean = false\n        ) {\n        const that = this;\n        // tslint:disable-next-line:only-arrow-functions\n        const handler = function(event: any) {\n            const message = event.data;\n            if (!message) {\n                reject(event);\n            }\n            const res = that.parseMessage(message);\n            if (!res.id) {\n                reject('No message id');\n            }\n            if (!that.handlers[res.id]) {\n                reject('No message handler');\n            }\n            if (res.id !== handler.id) {\n                return;\n            }\n            document.removeEventListener('message', that.handlers[res.id]);\n            delete that.handlers[res.id];\n            if (res.action === action) {\n                resolve(res);\n            } else {\n                reject(res);\n            }\n        } as any;\n        handler.id = id;\n        this.handlers[id] = handler;\n        document.addEventListener('message', this.handlers[id]);\n        if (needTimeout) {\n            setTimeout(() => {\n                reject('Time out');\n            }, this.timeout);\n        }\n    }\n\n}\n\nexport default CyanoBridge;\n","import CyanoBridge from '../CyanoBridge';\n\nlet cb: CyanoBridge;\n\nexport function registerClient(timeout: number = 3000) {\n    cb = new CyanoBridge(timeout);\n}\n\nexport async function call(request: any) {\n    return cb.call(request);\n}\n\nexport const version = '1.0.0';\n","import { makeInvokeFunction } from '../utils';\nimport { call, version } from './proxy';\n\n// tslint:disable-next-line:one-variable-per-declaration\nexport const scApi = {\n    invoke(params: {\n        scriptHash: string,\n        operation: string,\n        args: any[],\n        gasPrice: number,\n        gasLimit: number,\n        payer: string,\n        config?: {\n            login: boolean,\n            message: string,\n            url: string\n        }\n    }) {\n        if (!params.scriptHash || !params.operation || !params.args) {\n            throw new Error('Invalid params.');\n        }\n        if (!params.payer) {\n            throw new Error('No payer.');\n        }\n\n        if (!params.config) {\n            params.config = {\n                login: true,\n                message: '',\n                url: ''\n            };\n        }\n        const functionParams = makeInvokeFunction(params.operation, params.args);\n        const req: any = {\n            action: 'invoke',\n            version,\n            params: {\n                login: params.config.login,\n                url: params.config.url,\n                message: params.config.message,\n                invokeConfig: {\n                    contractHash: params.scriptHash,\n                    functions: [functionParams],\n                    payer: params.payer,\n                    gasPrice: params.gasPrice ? params.gasPrice : 500,\n                    gasLimit: params.gasLimit ? params.gasLimit : 20000\n                }\n            }\n        };\n        return call(req);\n    },\n    invokeRead(params: {\n        scriptHash: string,\n        operation: string,\n        args: any[],\n        gasPrice: number,\n        gasLimit: number,\n        payer?: string,\n        config?: {\n            login: boolean,\n            message: string,\n            url: string\n        }\n    }) {\n        if (!params.scriptHash || !params.operation || !params.args) {\n            throw new Error('Invalid params.');\n        }\n\n        if (!params.config) {\n            params.config = {\n                login: true,\n                message: '',\n                url: ''\n            };\n        }\n        const functionParams = makeInvokeFunction(params.operation, params.args);\n        const req: any = {\n            action: 'invokeRead',\n            version,\n            params: {\n                login: params.config.login,\n                url: params.config.url,\n                message: params.config.message,\n                invokeConfig: {\n                    contractHash: params.scriptHash,\n                    functions: [functionParams],\n                    payer: params.payer,\n                    gasPrice: params.gasPrice ? params.gasPrice : 500,\n                    gasLimit: params.gasLimit ? params.gasLimit : 20000\n                }\n            }\n        };\n        return call(req);\n    },\n    invokePasswordFree(params: {\n        scriptHash: string,\n        operation: string,\n        args: any[],\n        gasPrice: number,\n        gasLimit: number,\n        payer: string,\n        config: {\n            login: boolean,\n            message: string,\n            url: string\n        }\n    }) {\n        if (!params.scriptHash || !params.operation || !params.args || params.args.length === 0) {\n            throw new Error('Invalid params.');\n        }\n\n        if (!params.payer) {\n            throw new Error('No payer.');\n        }\n\n        if (!params.config) {\n            params.config = {\n                login: true,\n                message: '',\n                url: ''\n            };\n        }\n        const functionParams = makeInvokeFunction(params.operation, params.args);\n        const req: any = {\n            action: 'invokePasswordFree',\n            version,\n            params: {\n                login: params.config.login,\n                url: params.config.url,\n                message: params.config.message,\n                invokeConfig: {\n                    contractHash: params.scriptHash,\n                    functions: [functionParams],\n                    payer: params.payer,\n                    gasPrice: params.gasPrice ? params.gasPrice : 500,\n                    gasLimit: params.gasLimit ? params.gasLimit : 20000\n                }\n            }\n        };\n        return call(req);\n    },\n    invokeWasm(params: {\n        scriptHash: string,\n        operation: string,\n        args: any[],\n        gasPrice: number,\n        gasLimit: number,\n        payer: string,\n        config?: {\n            login: boolean,\n            message: string,\n            url: string\n        }\n    }) {\n        if (!params.scriptHash || !params.operation || !params.args) {\n            throw new Error('Invalid params.');\n        }\n        if (!params.payer) {\n            throw new Error('No payer.');\n        }\n\n        if (!params.config) {\n            params.config = {\n                login: true,\n                message: '',\n                url: ''\n            };\n        }\n        const functionParams = makeInvokeFunction(params.operation, params.args);\n        const req: any = {\n            action: 'invokeWasm',\n            version,\n            params: {\n                login: params.config.login,\n                url: params.config.url,\n                message: params.config.message,\n                invokeConfig: {\n                    contractHash: params.scriptHash,\n                    functions: [functionParams],\n                    payer: params.payer,\n                    gasPrice: params.gasPrice ? params.gasPrice : 500,\n                    gasLimit: params.gasLimit ? params.gasLimit : 20000\n                }\n            }\n        };\n        return call(req);\n    },\n    invokeWasmRead(params: {\n        scriptHash: string,\n        operation: string,\n        args: any[],\n        gasPrice: number,\n        gasLimit: number,\n        payer?: string,\n        config?: {\n            login: boolean,\n            message: string,\n            url: string\n        }\n    }) {\n        if (!params.scriptHash || !params.operation || !params.args) {\n            throw new Error('Invalid params.');\n        }\n\n        if (!params.config) {\n            params.config = {\n                login: true,\n                message: '',\n                url: ''\n            };\n        }\n        const functionParams = makeInvokeFunction(params.operation, params.args);\n        const req: any = {\n            action: 'invokeWasmRead',\n            version,\n            params: {\n                login: params.config.login,\n                url: params.config.url,\n                message: params.config.message,\n                invokeConfig: {\n                    contractHash: params.scriptHash,\n                    functions: [functionParams],\n                    payer: params.payer,\n                    gasPrice: params.gasPrice ? params.gasPrice : 500,\n                    gasLimit: params.gasLimit ? params.gasLimit : 20000\n                }\n            }\n        };\n        return call(req);\n    },\n    invokeWasmPasswordFree(params: {\n        scriptHash: string,\n        operation: string,\n        args: any[],\n        gasPrice: number,\n        gasLimit: number,\n        payer: string,\n        config: {\n            login: boolean,\n            message: string,\n            url: string\n        }\n    }) {\n        if (!params.scriptHash || !params.operation || !params.args || params.args.length === 0) {\n            throw new Error('Invalid params.');\n        }\n\n        if (!params.payer) {\n            throw new Error('No payer.');\n        }\n\n        if (!params.config) {\n            params.config = {\n                login: true,\n                message: '',\n                url: ''\n            };\n        }\n        const functionParams = makeInvokeFunction(params.operation, params.args);\n        const req: any = {\n            action: 'invokeWasmPasswordFree',\n            version,\n            params: {\n                login: params.config.login,\n                url: params.config.url,\n                message: params.config.message,\n                invokeConfig: {\n                    contractHash: params.scriptHash,\n                    functions: [functionParams],\n                    payer: params.payer,\n                    gasPrice: params.gasPrice ? params.gasPrice : 500,\n                    gasLimit: params.gasLimit ? params.gasLimit : 20000\n                }\n            }\n        };\n        return call(req);\n    }\n};\n","import { assetApi as asset } from './asset';\nimport { identityApi as identity } from './identity';\nimport { messageApi as message } from './message';\nimport { mobileApi as mobile } from './mobile';\nimport { providerApi as provider } from './provider';\nimport { qrcodeApi as qrcode } from './qrcode';\nimport { scApi as smartContract } from './smartcontract';\nimport { stateChannelApi as stateChannel } from './stateChannel';\n\nimport { registerClient } from './proxy';\n\nconst api = {\n    asset,\n    identity,\n    message,\n    mobile,\n    smartContract,\n    qrcode,\n    provider,\n    stateChannel\n};\n\nexport { registerClient, api};\n","import { call, version } from './proxy';\nimport { scApi } from './smartcontract';\n\nexport type Asset = 'ONT' | 'ONG' | string;\n\nexport const assetApi = {\n    getAccount(params?: { dappName: string, dappIcon: string, needTimeout: boolean }) {\n        const req = {\n            action: 'getAccount',\n            version,\n            params,\n            needTimeout: params ? params.needTimeout : false\n        };\n        return call(req);\n    },\n\n    transfer({ from, to, asset, amount, gasPrice, gasLimit }:\n        { from: string, to: string; asset: Asset; amount: number | string, gasPrice?: number, gasLimit?: number }) {\n        const ONT_CONTRACT = '0100000000000000000000000000000000000000';\n        const ONG_CONTRACT = '0200000000000000000000000000000000000000';\n        const params = {\n            scriptHash: asset === 'ONT' ? ONT_CONTRACT : ONG_CONTRACT,\n            operation: 'transfer',\n            args: [\n                {\n                    name: 'from',\n                    type: 'Address',\n                    value: from\n                },\n                {\n                    name: 'to',\n                    type: 'Address',\n                    value: to\n                },\n                {\n                    name: 'amount',\n                    type: 'Long',\n                    value: amount // Handler for number and string is the same\n                }\n            ],\n            gasPrice: gasPrice = 500,\n            gasLimit: gasLimit = 20000,\n            payer: from\n        };\n        return scApi.invoke(params);\n    }\n\n};\n","import { call, version } from './proxy';\nimport { scApi } from './smartcontract';\n// const subactions = ['getRegistryOntidTx', 'faceRecognition', 'submit',\n//     'requestAuthorization', 'getAuthorizationInfo', 'decryptClaim', 'deleteOntid', 'exportOntid];\n\nexport const identityApi = {\n    getIdentity(params?: { dappName: string, dappIcon: string, needTimeout: boolean }) {\n        const req = {\n            action: 'getIdentity',\n            version,\n            params,\n            needTimeout: params ? params.needTimeout : false\n        };\n        return call(req);\n    },\n    authentication(\n        params: {\n            subaction: string\n        }) {\n        // if (!params || !params.subaction) {\n        //     throw new Error('Invalid params. \"subaction\" missing.');\n        // }\n        // if (subactions.findIndex((item) => item === params.subaction) < 0) {\n        //     throw new Error('Invalid params. Wrong \"subaction\" ' + params.subaction);\n        // }\n        const req = {\n            action: 'authentication',\n            version,\n            params\n        };\n        return call(req);\n    },\n\n    authorization(\n        params: {\n            subaction: string\n            // seqno: string,\n            // user_ontid: string,\n            // app_ontid: string,\n            // to_ontid: string,\n            // callback: string,\n            // auth_template: string\n        }\n    ) {\n        const req = {\n            action: 'authorization',\n            version,\n            params\n        };\n        // if (!params || !params.subaction) {\n        //     throw new Error('Invalid params. \"subaction\" missing.');\n        // }\n        // if (subactions.findIndex((item) => item === params.subaction) < 0) {\n        //     throw new Error('Invalid params. Wrong \"subaction\" ' + params.subaction);\n        // }\n        return call(req);\n    },\n\n    registerOntId({ontid, publicKey, payer, gasPrice, gasLimit}:\n         {ontid: string, publicKey: string, payer: string, gasPrice?: number, gasLimit?: number}) {\n        const ONTID_CONTRACT = '0300000000000000000000000000000000000000';\n        const params = {\n            scriptHash: ONTID_CONTRACT,\n            operation: 'regIDWithPublicKey',\n            args: [\n                {\n                    name: 'ontid',\n                    type: 'String',\n                    value: ontid\n                },\n                {\n                    name: 'pk',\n                    type: 'ByteArray',\n                    value: publicKey\n                }\n            ],\n            gasPrice: gasPrice = 500,\n            gasLimit: gasLimit = 20000,\n            payer\n        };\n        return scApi.invoke(params);\n    },\n\n    getDDO(ontid: string) {\n        const ONTID_CONTRACT = '0300000000000000000000000000000000000000';\n        const params = {\n            scriptHash: ONTID_CONTRACT,\n            operation: 'getDDO',\n            args: [\n                {\n                    name: 'ontid',\n                    type: 'String',\n                    value:  ontid\n                }\n            ],\n            gasPrice: 500,\n            gasLimit: 20000\n        };\n        return scApi.invokeRead(params);\n    }\n};\n","import { call, version } from './proxy';\n\nexport const messageApi = {\n    signMessage(params: {message: string}) {\n        const req = {\n            action: 'signMessage',\n            version,\n            params,\n            needTimeout: false\n        };\n        return call(req);\n    },\n\n    login(params: {\n        message: string,\n        type: string,\n        dappName: string,\n        dappIcon: string,\n        expired: number,\n        callback: string\n    }) {\n        if (!params.message || typeof params.message !== 'string') {\n            throw new Error('Parameter for login must contain a message.');\n        }\n        if (!params.type) {\n            params.type = 'account';\n        }\n        const req = {\n            action: 'login',\n            version,\n            params,\n            needTimeout: false\n        };\n        return call(req);\n    }\n};\n","import { call, version } from './proxy';\n\nexport interface GET_DATA_PARAMS  {\n    dataType: string;\n}\n\nexport interface DO_ACTION_PARAMS {\n    actionType: string;\n    data: any;\n}\n\nexport interface GOTO_WEBVIEW_PARAMS {\n    url: string;\n    data: any;\n}\n\nexport interface GOTO_NATIVE_PARAMS {\n    page: string;\n    data: any;\n}\n\nexport const mobileApi = {\n    getData(params: GET_DATA_PARAMS) {\n        const req = {\n            action: 'getData',\n            version,\n            params,\n            needTimeout: false\n        };\n        return call(req);\n    },\n    doAction(params: DO_ACTION_PARAMS) {\n        const req = {\n            action: 'doAction',\n            version,\n            params,\n            needTimeout: false\n        };\n        return call(req);\n    },\n    gotoWebview(params: GOTO_WEBVIEW_PARAMS) {\n        const req = {\n            action: 'gotoWebview',\n            version,\n            params,\n            needTimeout: false\n        };\n        return call(req);\n    },\n    gotoNative(params: GOTO_NATIVE_PARAMS) {\n        const req = {\n            action: 'gotoNative',\n            version,\n            params,\n            needTimeout: false\n        };\n        return call(req);\n    },\n    switchIdentity() {\n        const req = {\n            action: 'switch_ontid',\n            version,\n            needTimeout: false\n        };\n        return call(req);\n    },\n    switchDeviceCode() {\n        const req = {\n            action: 'switch_device_code',\n            version,\n            needTimeout: false\n        };\n        return call(req);\n    }\n};\n","import { randomId } from '../utils';\nimport { version } from './proxy';\n\nexport const qrcodeApi = {\n    login(params: {\n        type: string,\n        dappName: string,\n        dappIcon: string,\n        message: string,\n        expire: number,\n        callback: string\n    }): string {\n        if (params.type !== 'ontid' && params.type !== 'account') {\n            throw new Error('Invalid parameter type ' + params.type);\n        }\n        const req = {\n            action: 'login',\n            version,\n            id: randomId(),\n            params\n        };\n        return JSON.stringify(req);\n    },\n\n    invoke(params: {\n        login: boolean,\n        callback: string,\n        qrcodeUrl: string\n    }): string {\n        const req = {\n            action: 'invoke',\n            version,\n            id: randomId(),\n            params\n        };\n        return JSON.stringify(req);\n    }\n};\n","import { call, version } from './proxy';\n\nexport const providerApi = {\n    getProvider() {\n        const req = {\n            action: 'getProvider',\n            version,\n            needTimeout: true\n        };\n        return call(req);\n    }\n};\n","import { call, version } from './proxy';\n\nexport const stateChannelApi = {\n    login() {\n        const params = {};\n        const req = {\n            action: 'stateChannelLogin',\n            version,\n            params,\n            needTimeout: false\n        };\n        return call(req);\n    }\n};\n"],"sourceRoot":""}